import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.feature_selection import f_regression


df = pd.read_csv('MultipleRegressionProject/BallTeamStats.csv')
# df.drop( 'Rk' , inplace = True,axis=1)
print(df.head())

# print(df.head())
# print(df.columns)

# sns.scatterplot(x='X4 number of convenience stores',
#                 y='Y house price of unit area', data=df)

# plt.show()


X = df[['Age', 'TS%', 'TOV%', 'ORB%', 'FT/FGA',
  'D_eFG%', 'D_TOV%', 'D_RB%', 'D_FT/FGA']]
y = df['W']
print(X)
print(y)



X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=None)

model = LinearRegression()

model.fit(X_train,y_train)

predictions = model.predict(X_test)

print(
  'mean_squared_error : ', mean_squared_error(y_test, predictions))
print(
  'mean_absolute_error : ', mean_absolute_error(y_test, predictions))

finalPredict = model.predict([[24, 0.553, 11.2, 30, 0.18, 0.523, 13.3, 77.8, 0.195]])
print("Prediction based on boston celtics", finalPredict)

import statsmodels.api as ssm #for detail description of linear coefficients, intercepts, deviations, and many more

X=ssm.add_constant(X)        #to add constant value in the model
model= ssm.OLS(y,X).fit()         #fitting the model
print(model.summary())

